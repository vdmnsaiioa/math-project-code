from sympy import *
Ri, Ro, Rc, Re = symbols('Ri Ro Rc Re', positive=True)
miu, Br = symbols('miu Br',real=True)

X = Matrix([[-Br*(-2*Re**2*Ri**2*Ro**2 - 2*Ri**2*Ro**4)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) + Br*(2*Re**2*Ri**2*Ro**2*miu - 2*Ri**2*Ro**4*miu)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) + Br*(Re**2*Ri**4*miu - Re**2*Ri**4 - Re**2*Ri**2*Ro**2*miu - Re**2*Ri**2*Ro**2 - Ri**4*Ro**2*miu - Ri**4*Ro**2 + Ri**2*Ro**4*miu - Ri**2*Ro**4)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) - Br*(Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 - Ri**4*Ro**2*miu - Ri**4*Ro**2 - Ri**2*Ro**4*miu + Ri**2*Ro**4)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4)], [Br*(Rc**2*Re**2*Ri**2*miu - Rc**2*Re**2*Ri**2 - Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Re**2*Ri**4*miu - Re**2*Ri**4 - Ri**4*Ro**2*miu - Ri**4*Ro**2)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) - Br*(-Rc**2*Re**2*Ri**2*miu**2 + Rc**2*Re**2*Ri**2*miu + Rc**2*Ri**2*Ro**2*miu**2 + Rc**2*Ri**2*Ro**2*miu + Re**2*Ri**4*miu**2 - Re**2*Ri**4*miu - Ri**4*Ro**2*miu**2 - Ri**4*Ro**2*miu)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) - Br*(Rc**2*Re**2*Ro**2*miu - Rc**2*Re**2*Ro**2 + Rc**2*Ro**4*miu - Rc**2*Ro**4 - Re**2*Ri**2*Ro**2*miu - Re**2*Ri**2*Ro**2 - Ri**2*Ro**4*miu - Ri**2*Ro**4)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) + Br*(-Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2*miu + Rc**2*Ro**4*miu**2 - Rc**2*Ro**4*miu + Re**2*Ri**2*Ro**2*miu**2 + Re**2*Ri**2*Ro**2*miu - Ri**2*Ro**4*miu**2 - Ri**2*Ro**4*miu)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4)], [Br*(-2*Rc**2*Ri**2*Ro**2 - 2*Ri**4*Ro**2)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) - Br*(2*Rc**2*Ri**2*Ro**2*miu - 2*Ri**4*Ro**2*miu)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) - Br*(-Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu - Rc**2*Ro**4 + Ri**4*Ro**2*miu - Ri**4*Ro**2 - Ri**2*Ro**4*miu - Ri**2*Ro**4)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) + Br*(Rc**2*Ri**2*Ro**2*miu + Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu - Rc**2*Ro**4 - Ri**4*Ro**2*miu + Ri**4*Ro**2 - Ri**2*Ro**4*miu - Ri**2*Ro**4)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4)], [-Br*(-2*Rc**2*Re**2*Ri**2*Ro**2 - 2*Rc**2*Ri**2*Ro**4)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) + Br*(2*Rc**2*Re**2*Ri**2*Ro**2*miu - 2*Rc**2*Ri**2*Ro**4*miu)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) + Br*(Rc**2*Re**2*Ri**4*miu - Rc**2*Re**2*Ri**4 - Rc**2*Re**2*Ri**2*Ro**2*miu - Rc**2*Re**2*Ri**2*Ro**2 - Rc**2*Ri**4*Ro**2*miu - Rc**2*Ri**4*Ro**2 + Rc**2*Ri**2*Ro**4*miu - Rc**2*Ri**2*Ro**4)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) - Br*(Rc**2*Re**2*Ri**4*miu - Rc**2*Re**2*Ri**4 + Rc**2*Re**2*Ri**2*Ro**2*miu + Rc**2*Re**2*Ri**2*Ro**2 - Rc**2*Ri**4*Ro**2*miu - Rc**2*Ri**4*Ro**2 - Rc**2*Ri**2*Ro**4*miu + Rc**2*Ri**2*Ro**4)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4)], [-Br*(-Rc**2*Re**2*Ri**2*Ro**2*miu - Rc**2*Re**2*Ri**2*Ro**2 - Rc**2*Ri**2*Ro**4*miu - Rc**2*Ri**2*Ro**4 + Re**2*Ri**4*Ro**2*miu - Re**2*Ri**4*Ro**2 + Ri**4*Ro**4*miu - Ri**4*Ro**4)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) + Br*(-Rc**2*Re**2*Ri**2*Ro**2*miu - Rc**2*Re**2*Ri**2*Ro**2 + Rc**2*Ri**2*Ro**4*miu - Rc**2*Ri**2*Ro**4 - Re**2*Ri**4*Ro**2*miu - Re**2*Ri**4*Ro**2 + Ri**4*Ro**4*miu - Ri**4*Ro**4)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) + Br*(Rc**2*Re**2*Ri**2*Ro**2*miu**2 + Rc**2*Re**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**4*miu**2 - Rc**2*Ri**2*Ro**4*miu - Re**2*Ri**4*Ro**2*miu**2 + Re**2*Ri**4*Ro**2*miu + Ri**4*Ro**4*miu**2 - Ri**4*Ro**4*miu)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) - Br*(Rc**2*Re**2*Ri**2*Ro**2*miu**2 + Rc**2*Re**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**4*miu**2 + Rc**2*Ri**2*Ro**4*miu - Re**2*Ri**4*Ro**2*miu**2 - Re**2*Ri**4*Ro**2*miu + Ri**4*Ro**4*miu**2 - Ri**4*Ro**4*miu)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4)], [Br*(-2*Rc**2*Re**2*Ri**2*Ro**2 - 2*Re**2*Ri**4*Ro**2)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) - Br*(2*Rc**2*Re**2*Ri**2*Ro**2*miu - 2*Re**2*Ri**4*Ro**2*miu)*log(Ri)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) - Br*(-Rc**2*Re**2*Ri**2*Ro**2*miu - Rc**2*Re**2*Ri**2*Ro**2 + Rc**2*Re**2*Ro**4*miu - Rc**2*Re**2*Ro**4 + Re**2*Ri**4*Ro**2*miu - Re**2*Ri**4*Ro**2 - Re**2*Ri**2*Ro**4*miu - Re**2*Ri**2*Ro**4)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4) + Br*(Rc**2*Re**2*Ri**2*Ro**2*miu + Rc**2*Re**2*Ri**2*Ro**2 + Rc**2*Re**2*Ro**4*miu - Rc**2*Re**2*Ro**4 - Re**2*Ri**4*Ro**2*miu + Re**2*Ri**4*Ro**2 - Re**2*Ri**2*Ro**4*miu - Re**2*Ri**2*Ro**4)*log(Ro)/(Rc**2*Re**2*Ri**2*miu**2 - Rc**2*Re**2*Ri**2 - Rc**2*Re**2*Ro**2*miu**2 + Rc**2*Re**2*Ro**2 - Rc**2*Ri**2*Ro**2*miu**2 - 2*Rc**2*Ri**2*Ro**2*miu - Rc**2*Ri**2*Ro**2 + Rc**2*Ro**4*miu**2 - 2*Rc**2*Ro**4*miu + Rc**2*Ro**4 - Re**2*Ri**4*miu**2 + 2*Re**2*Ri**4*miu - Re**2*Ri**4 + Re**2*Ri**2*Ro**2*miu**2 + 2*Re**2*Ri**2*Ro**2*miu + Re**2*Ri**2*Ro**2 + Ri**4*Ro**2*miu**2 - Ri**4*Ro**2 - Ri**2*Ro**4*miu**2 + Ri**2*Ro**4)]])

a = (Re**2-Ro**2)/(Re**2+Ro**2)
b = -(Ri**2-Rc**2)/(Ri**2+Rc**2)
D2 = -((a*miu-1)/(a*miu+1)*Ro**(-2)-(miu*b-1)/(miu*b+1)*Ri**(-2))**(-1)*Br*(log(Ri)-log(Ro))
C1 = D2/(Ri**2+Rc**2)*(1-(miu*b-1)/(miu*b+1))
C2 = -D2*(miu*a-1)/(miu*a+1)*Ro**(-2)+Br*log(Ro)
C3 = D2/(Ro**2+Re**2)*(1-(miu*a-1)/(miu*a+1))
D1 = C1*Rc**2
D3 = C3*Re**2
"""
X_l = lambdify((Ri, Ro, Rc, Re, miu, Br), X[4], 'numpy')
D2_l = lambdify((Ri, Ro, Rc, Re, miu, Br), D2, 'numpy')
print(X_l(1,2,3,4,5,6))
print(D2_l(1,2,3,4,5,6))
"""
print(simplify(X[4]-D2))
print(simplify(X[0]-C1))
print(simplify(X[1]-C2))
print(simplify(X[2]-C3))
print(simplify(X[3]-D1))
print(simplify(X[5]-D3))

